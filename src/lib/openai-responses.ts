import { openai } from './openai-client'

export interface ChatMessage {
  role: 'user' | 'assistant'
  content: string
}

export interface OpenAIResponse {
  content: string
  tokens_used?: number
  response_time_ms?: number
}

/**
 * OPTIMAL price query using Vector Store + File Search (no attachments)
 * Targets Venezuelan B2B price lookups across multiple catalogs
 */
export async function queryPricesFast(
  query: string,
  vectorStoreIds: string[],
  conversationHistory: ChatMessage[] = []
): Promise<OpenAIResponse> {
  const startTime = Date.now()

  try {
    if (vectorStoreIds.length === 0) {
      // Fallback: plain chat (no retrieval)
      const systemPrompt = `Eres un asistente especializado en consultas de precios para el mercado B2B venezolano.
INSTRUCCIONES: Responde en espa√±ol venezolano de manera concisa y profesional.
Si no tienes informaci√≥n espec√≠fica de precios, indica que necesitas acceso a los cat√°logos de precios.`

      const messages = [
        { role: 'system' as const, content: systemPrompt },
        ...conversationHistory.map(msg => ({
          role: msg.role as 'user' | 'assistant',
          content: msg.content
        })),
        { role: 'user' as const, content: query }
      ]

      const response = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages,
        temperature: 0.3,
        max_tokens: 400
      })

      const processingTime = Date.now() - startTime
      console.log(`üí® Fallback query completed in ${processingTime}ms`)

      return {
        content: response.choices[0]?.message?.content || 'No se pudo procesar la consulta.',
        tokens_used: response.usage?.total_tokens,
        response_time_ms: processingTime,
      }
    }

    // OPTIMAL: Vector Stores + File Search via tool_resources
    console.log(`üöÄ OPTIMAL SEARCH: Using ${vectorStoreIds.length} vector stores with intelligent retrieval`)

    const systemInstructions = `Prompt de Instrucciones para GPT de Precios (Repuestos de Tel√©fonos)

Eres un asistente de precios B2B para Venezuela. Tu funci√≥n es responder consultas sobre repuestos de tel√©fonos (pantallas, LCD, OLED, bater√≠as, etc.) usando √∫nicamente la informaci√≥n de los PDF cargados en el vector store (cada PDF representa un proveedor distinto).

Reglas de B√∫squeda
	1.	Busca en TODOS los cat√°logos disponibles en el vector store.
	2.	Considera que el nombre del proveedor es el nombre del archivo (sin la extensi√≥n .pdf).
	‚Ä¢	Ejemplo: ‚ÄúCELL WORLD PANTALLAS 08-08-2025.pdf‚Äù ‚Üí Cell World ‚Äì Cat√°logo 08-ago-2025
	3.	Haz coincidencias exactas y por variantes (ejemplo: ‚ÄúiPhone 13 / 13 Pro / 13 Pro Max‚Äù, ‚ÄúINCELL‚Äù, ‚ÄúOLED‚Äù, ‚ÄúORIGINAL‚Äù, ‚ÄúCopy AAA‚Äù).
	4.	Extrae siempre:
	‚Ä¢	Descripci√≥n
	‚Ä¢	Variante (ORIGINAL / OLED / INCELL / Copy, etc.)
	‚Ä¢	Precio exacto con moneda
	‚Ä¢	Estado (Disponible / Agotado, si aparece)
	‚Ä¢	Nombre del proveedor (derivado del archivo)
	‚Ä¢	Fecha del cat√°logo (del nombre del archivo o portada).

Reglas de Cobertura (OBLIGATORIAS)
	1.	Siempre busca en todos los cat√°logos cargados en el vector store.
	2.	Cada cat√°logo corresponde a un archivo PDF. Usa su nombre de archivo (sin extensi√≥n) como nombre del proveedor.
	3.	La respuesta debe contener una secci√≥n por cada cat√°logo, en orden alfab√©tico por nombre de archivo.
	4.	Si un cat√°logo no contiene coincidencias, igual incluye la secci√≥n y escribe:
‚Äî Sin coincidencias para este modelo en este cat√°logo ‚Äî

Formato de Respuesta (Markdown)
	‚Ä¢	Responde solo en espa√±ol venezolano.
	‚Ä¢	Agrupa SIEMPRE por proveedor en este orden (alfab√©tico por nombre del archivo):

[Nombre del Proveedor]
	‚Ä¢	[Descripci√≥n + Variante] ‚Äì [Precio con moneda] (Stock)
[Variante / Especificaciones]
	‚Ä¢	No uses tablas.
	‚Ä¢	Usa separadores de miles: Bs. 1.500.000 o $120.
	‚Ä¢	Si un cat√°logo no tiene coincidencias, muestra el bloque con:
‚Äî Sin coincidencias para este modelo en este cat√°logo ‚Äî

Pol√≠ticas
	‚Ä¢	Si hay varias variantes, mu√©stralas cada una.
	‚Ä¢	Si un mismo modelo aparece en diferentes cat√°logos, cada precio va en su bloque de proveedor.
	‚Ä¢	Nunca inventes informaci√≥n ni conviertas monedas.

Ejemplo de Salida

Citycellgsm
	‚Ä¢	Pantalla LCD ORIGINAL ‚Äì $110
[Compatible con iPhone 13 ‚Ä¢ ORIGINAL]
	‚Ä¢	Pantalla OLED (NO IC) ‚Äì $60
[OLED ‚Ä¢ (NO IC)]

KON
	‚Ä¢	Pantalla JK INCELL ‚Äì Bs. 28
[INCELL]
	‚Ä¢	Pantalla JK OLED (Nuevo) ‚Äì Bs. 84
[OLED ‚Ä¢ Nuevo]

Cell World
	‚Ä¢	Pantalla AMOLED ‚Äì $57
[AMOLED]
	‚Ä¢	Pantalla INCELL ‚Äì $29
[INCELL]`

    // Build messages preserving roles
    const inputMessages = [
      { role: 'system' as const, content: systemInstructions },
      ...conversationHistory.map(msg => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content
      })),
      { role: 'user' as const, content: query }
    ]

    const response = await openai.responses.create({
      model: 'gpt-4o-mini',
      input: inputMessages,
      tools: [
        {
          type: 'file_search',
          vector_store_ids: vectorStoreIds, // <-- required by the TS type
          // optional:
          // max_num_results: 12,
        }
      ],
      tool_choice: 'auto',     // let it decide when to retrieve
      temperature: 0.1,
      max_output_tokens: 400,
      stream: false
    })

    // Poll if needed (Responses can be async)
    let finalResponse = response
    if (response.status === 'in_progress') {
      let attempts = 0
      const maxAttempts = 30 // up to ~15s
      while (finalResponse.status === 'in_progress' && attempts < maxAttempts) {
        await new Promise(r => setTimeout(r, 500))
        finalResponse = await openai.responses.retrieve(response.id)
        attempts++
      }
    }

    if (finalResponse.status === 'completed') {
      const processingTime = Date.now() - startTime
      const performanceStatus =
        processingTime <= 60 ? 'EXCELLENT üöÄ' : processingTime <= 120 ? 'GOOD ‚ö°' : 'ACCEPTABLE ‚è∞'

      // Extract text safely
      let content = 'No se pudo procesar la consulta.'
      if (Array.isArray(finalResponse.output) && finalResponse.output.length > 0) {
        const last = finalResponse.output[finalResponse.output.length - 1]
        if (last?.type === 'message') {
          const textPart = last.content?.find?.(c => c.type === 'output_text') as any
          if (textPart?.text) content = textPart.text
        }
      }

      console.log(`üéâ OPTIMAL SEARCH completed in ${processingTime}ms - ${performanceStatus}`)
      console.log(`üìä Processed ${vectorStoreIds.length} vector stores | tokens=${finalResponse.usage?.total_tokens ?? 0}`)

      return {
        content,
        tokens_used: finalResponse.usage?.total_tokens,
        response_time_ms: processingTime,
      }
    } else {
      const processingTime = Date.now() - startTime
      console.error(`‚ùå Optimal search failed with status: ${finalResponse.status}`)
      throw new Error(`La consulta no pudo completarse. Estado: ${finalResponse.status}`)
    }

  } catch (error) {
    const processingTime = Date.now() - startTime
    console.error(`‚ùå Optimal search failed after ${processingTime}ms:`, error)
    throw new Error(`Error en consulta de precios: ${error instanceof Error ? error.message : 'Error desconocido'}`)
  }
}